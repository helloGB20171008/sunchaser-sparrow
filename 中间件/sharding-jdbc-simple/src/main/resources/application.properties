spring.application.name=sharding-jdbc-simple-demo
server.port=520

# 重复的bean定义进行覆盖
spring.main.allow-bean-definition-overriding=true
# 数据源配置
spring.shardingsphere.datasource.names=ds1
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://127.0.0.1:3306/sharding_jdbc_db?useUnicode=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=ll970722

# 分片规则配置
# 真实数据节点，由数据源名 + 表名组成，以小数点分隔
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds1.t_order_$->{1..2}
# 主键列名称，缺省表示不使用自增主键生成器
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
# 自增列值生成器类型，缺省表示使用默认自增列值生成器。
# 可使用自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID/LEAF_SEGMENT
# 这里使用SNOWFLAKE雪花算法
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
# 分片策略
# 分片键
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
# 分片算法 生成的ID为奇数，插入到t_order_2中，偶数则插入到t_order_1中
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}
# 打印sharding-jdbc的真实执行sql日志
spring.shardingsphere.props.sql.show=true

########################################################################
#
#     mybatis配置
#
#########################################################################
# xml映射文件路径
mybatis.mapper-locations=classpath:mapper/**/*.xml
# 下划线自动转驼峰
mybatis.configuration.map-underscore-to-camel-case=true

# 日志级别配置
logging.level.root=info
logging.level.org.springframework.web=info
logging.level.com.sunchaser.shardingjdbc=debug
logging.level.druid.sql=debug
server:
  port: 520
  servlet:
    context-path: /sharding-jdbc
spring:
  application:
    name: sharding-jdbc-simple-demo
  main:
    # 重复的bean会进行覆盖
    allow-bean-definition-overriding: true
  # 数据源配置
  shardingsphere:
    datasource:
      # 数据源名称，多数据源以逗号分隔
      names: ds1
      # 数据源ds1详情配置
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/sharding_jdbc_db?useUnicode=true&serverTimezone=Asia/Shanghai
        username: root
        password: ll970722
    # sharding-jdbc分片规则配置
    sharding:
      tables:
        t_order:
          # 数据节点
          actual-data-nodes: ds1.t_order_$->{1..2}
          # 主键列和主键生成策略：雪花算法
          key-generator:
            column: order_id
            type: SNOWFLAKE
          # 分片策略
          table-strategy:
            inline:
              # 分片键
              sharding-column: order_id
              # 分片算法：生成的ID为奇数，插入到t_order_2中，偶数则插入到t_order_1中
              algorithm-expression: t_order_$->{order_id % 2 + 1}
    props:
      sql:
        # 打印sharding-jdbc的真实执行sql日志
        show: true
mybatis:
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    # 自动转驼峰
    map-underscore-to-camel-case: true
# 日志级别
logging:
  level:
    root: info
    org:
      springframework:
        web: info
    com:
      sunchaser:
        shardingjdbc: debug
    druid:
      sql: debug